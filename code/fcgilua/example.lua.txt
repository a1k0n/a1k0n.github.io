function init()
    -- connect to database or whatever
    return true
end

function urlunescape(s)
    s = string.gsub(s, "+", " ")
    s = string.gsub(s, "%%(%x%x)", function(h) 
            return string.char(tonumber(h,16)) 
        end)
    return s
end

function urlescape(s)
    s = string.gsub(s, "([&=+%c])", function(c)
            return string.format("%%%02X", string.byte(c))
        end)
    s = string.gsub(s, " ", "+")
    return s
end

function urldecode(s, qparams)
    qparams = qparams or {}
    for name,value in string.gmatch(s, "([^&=]+)=([^&=]*)") do
        qparams[urlunescape(name)] = urlunescape(value)
    end
    return qparams
end

function urlencode(qparams)
    local s
    for k,v in pairs(qparams) do
        s=(s and s..'&' or '')..urlescape(k)..'='..urlescape(v)
    end
    return s
end

function sanitize_html(s)
    s=string.gsub(s, '&', '&amp;')
    s=string.gsub(s, '<', '&lt;')
    s=string.gsub(s, '>', '&gt;')
    return s
end

function handle_request()
    local requri = getparam("REQUEST_URI") or ""
    local qstring = getparam("QUERY_STRING") or ""
    local cstring = getparam("HTTP_COOKIE") or ""
    local secure = tonumber(getparam("SERVER_PORT")) == 443
    local postsize = tonumber(getparam("CONTENT_LENGTH"))

    local qparams = urldecode(qstring)
    local cookies = urldecode(cstring)

    -- split up URL into an array of request parameters
    local reqparams = {}
    local i,j = string.find(requri, '?')
    if i then requri = string.sub(requri, 1, i-1) end
    for w in string.gmatch(requri, "/([^/]+)") do
        table.insert(reqparams, w)
    end

    execpath = '/'..reqparams[1]..'/'

    if postsize then
        local poststring = getcgi(postsize)
        urldecode(poststring, qparams)
    end

    putcgi('Content-type: text/plain\r\n')
    putcgi('\r\n')
    putcgi('blah')
end



struct vm_state {
  double d2111, d2039, d2051, d2110, d2050, d2052, d2041,
         d2040, d2042, d2114, d2113, d2112, d2106, d2105, d2109,
         d2108, d2107, d2101, d2100, d2104, d2103, d2102, d2096,
         d2095, d2099, d2098, d2097, d2091, d2090, d2094, d2093,
         d2092, d2086, d2085, d2089, d2088, d2087, d2081, d2080,
         d2084, d2083, d2082, d2076, d2075, d2079, d2078, d2077,
         d2071, d2070, d2074, d2073, d2072, d2066, d2065, d2069,
         d2068, d2067, d2061, d2060, d2064, d2063, d2062, d2056,
         d2055, d2059, d2058, d2057, d2054, d2053, d2046, d2045,
         d2049, d2048, d2047, d2044, d2043, d2127, d2126, d2125,
         d2124, d2123, d2122, d2121, d2120, d2119, d2118, d2117,
         d2116, d2128, d2115;
};

#include <math.h>

void vm_init(vm_state *s, double *output, double *input) {
  output[0] = 0;
  output[1] = 10000;
  output[2] = -6.557e+06;
  output[3] = 7814.93;
  output[4] = 100000;
  output[5] = 58.9192;
  output[6] = 75000;
  output[7] = 9.34299e+06;
  output[8] = 9.18223e+06;
  output[9] = 0;
  output[10] = 7.62482e+06;
  output[11] = 2.45638e+07;
  output[12] = 0;
  output[13] = -6.55367e+06;
  output[14] = 3.83648e+07;
  output[15] = 0;
  output[16] = -3.07329e+07;
  output[17] = 4.18877e+07;
  output[18] = 0;
  output[19] = -5.70943e+07;
  output[20] = 2.91887e+07;
  output[21] = 0;
  output[22] = -7.4914e+07;
  output[23] = 10380.6;
  output[24] = 0;
  output[25] = -7.44174e+07;
  output[26] = -3.91686e+07;
  output[27] = 0;
  output[28] = -5.07375e+07;
  output[29] = -7.65104e+07;
  output[30] = 0;
  output[31] = -6.55919e+06;
  output[32] = -9.83492e+07;
  output[33] = 0;
  output[34] = 4.76197e+07;
  output[35] = -9.38332e+07;
  output[36] = 0;
  output[37] = -6.55438e+06;
  output[38] = 3.86345e+08;
  output[39] = 0;
  output[100] = -6.55597e+06;
  output[101] = 3.84407e+08;
  s->d2039 = 1;
  s->d2040 = 0;
  s->d2041 = 0;
  s->d2042 = 6e+24;
  s->d2043 = 0;
  s->d2044 = 0;
  s->d2045 = 6.557e+06;
  s->d2046 = -7814.93;
  s->d2047 = 1;
  s->d2048 = -9.31419;
  s->d2049 = -7814.93;
  s->d2050 = 1020.67;
  s->d2051 = 3.84399e+08;
  s->d2052 = 7.347e+22;
  s->d2053 = 1020.67;
  s->d2054 = -0.00271014;
  s->d2055 = 6.657e+06;
  s->d2056 = -7756.01;
  s->d2057 = 1;
  s->d2058 = -9.03646;
  s->d2059 = -7756.01;
  s->d2060 = 1.59e+07;
  s->d2061 = 9.17441e+06;
  s->d2062 = 1;
  s->d2063 = 2357.65;
  s->d2064 = -4085.94;
  s->d2065 = 1.41818e+07;
  s->d2066 = 2.4556e+07;
  s->d2067 = 1;
  s->d2068 = 3319.3;
  s->d2069 = -1916.97;
  s->d2070 = 3328.07;
  s->d2071 = 3.8357e+07;
  s->d2072 = 1;
  s->d2073 = 3328.07;
  s->d2074 = -0.272145;
  s->d2075 = -2.41759e+07;
  s->d2076 = 4.18799e+07;
  s->d2077 = 1;
  s->d2078 = 2591.95;
  s->d2079 = 1496.26;
  s->d2080 = -5.05373e+07;
  s->d2081 = 2.91809e+07;
  s->d2082 = 1;
  s->d2083 = 1375.38;
  s->d2084 = 2381.99;
  s->d2085 = -6.8357e+07;
  s->d2086 = 2565.62;
  s->d2087 = 1;
  s->d2088 = 0.0857074;
  s->d2089 = 2565.62;
  s->d2090 = -6.78604e+07;
  s->d2091 = -3.91764e+07;
  s->d2092 = 1;
  s->d2093 = -1209.41;
  s->d2094 = 2094.88;
  s->d2095 = -4.41805e+07;
  s->d2096 = -7.65183e+07;
  s->d2097 = 1;
  s->d2098 = -1991.16;
  s->d2099 = 1149.66;
  s->d2100 = -2199.39;
  s->d2101 = -9.8357e+07;
  s->d2102 = 1;
  s->d2103 = -2199.39;
  s->d2104 = 0.0414158;
  s->d2105 = 5.41767e+07;
  s->d2106 = -9.3841e+07;
  s->d2107 = 1;
  s->d2108 = -1831.37;
  s->d2109 = -1057.3;
  s->d2110 = 2611.34;
  s->d2111 = 3.86337e+08;
  s->d2112 = 1;
  s->d2113 = 2611.34;
  s->d2114 = -1.30827;
  s->d2115 = 10000;
  s->d2116 = 0;
  s->d2117 = 0;
  s->d2118 = 0;
  s->d2119 = 0;
  s->d2120 = 0;
  s->d2121 = 0;
  s->d2122 = 0;
  s->d2123 = 0;
  s->d2124 = 0;
  s->d2125 = 0;
  s->d2126 = 0;
  s->d2127 = 0;
  s->d2128 = 75000;
  
}

void vm_step(vm_state *s, double *output, double *input) {
  double _0 = s->d2040 - s->d2045;
  double _1 = 6.67428e-11 * s->d2042;
  double _2 = s->d2041 - s->d2046;
  double _3 = sqrt(_0 * _0 + _2 * _2);
  double _4 = _1 / (_3 * _3 * _3);
  double _5 = s->d2050 - s->d2045;
  double _6 = 6.67428e-11 * s->d2052;
  double _7 = s->d2051 - s->d2046;
  double _8 = sqrt(_5 * _5 + _7 * _7);
  double _9 = _6 / (_8 * _8 * _8);
  double _10 = _0 * _4 + _5 * _9;
  double _11 = s->d2045 + s->d2048 + (input[2] + _10) * 0.5;
  double _12 = _11 - s->d2040;
  double _13 = _2 * _4 + _7 * _9;
  double _14 = s->d2046 + s->d2049 + (input[3] + _13) * 0.5;
  double _15 = _14 - s->d2041;
  double _16 = _11 - s->d2050;
  double _17 = _14 - s->d2051;
  double _18 = sqrt(input[2] * input[2] + input[3] * input[3]);
  double _19 = s->d2115 - _18;
  double _20 = s->d2040 - s->d2055;
  double _21 = s->d2041 - s->d2056;
  double _22 = sqrt(_20 * _20 + _21 * _21);
  double _23 = _1 / (_22 * _22 * _22);
  double _24 = s->d2050 - s->d2055;
  double _25 = s->d2051 - s->d2056;
  double _26 = sqrt(_24 * _24 + _25 * _25);
  double _27 = _6 / (_26 * _26 * _26);
  double _28 = _20 * _23 + _24 * _27;
  double _29 = s->d2055 + s->d2058 + _28 * 0.5;
  double _30 = _11 - _29;
  double _31 = _21 * _23 + _25 * _27;
  double _32 = s->d2056 + s->d2059 + _31 * 0.5;
  double _33 = _14 - _32;
  double _34 = sqrt(_30 * _30 + _33 * _33) - 1000;
  double _35 = 10000 - _19;
  double _36 = _34 < 0 ? _35 - s->d2128 < 0 ? _35 : s->d2128 : 0;
  double _37 = _19 + _36;
  double _38 = 2e+06 - s->d2039;
  double _39 = s->d2040 - s->d2060;
  double _40 = s->d2041 - s->d2061;
  double _41 = sqrt(_39 * _39 + _40 * _40);
  double _42 = _1 / (_41 * _41 * _41);
  double _43 = s->d2050 - s->d2060;
  double _44 = s->d2051 - s->d2061;
  double _45 = sqrt(_43 * _43 + _44 * _44);
  double _46 = _6 / (_45 * _45 * _45);
  double _47 = _39 * _42 + _43 * _46;
  double _48 = s->d2060 + s->d2063 + _47 * 0.5;
  double _49 = _11 - _48;
  double _50 = _40 * _42 + _44 * _46;
  double _51 = s->d2061 + s->d2064 + _50 * 0.5;
  double _52 = _14 - _51;
  double _53 = s->d2117 == 0 ? sqrt(_49 * _49 + _52 * _52) - 1000 < 0 ? _38 : s->d2117 : s->d2117;
  double _54 = s->d2040 - s->d2065;
  double _55 = s->d2041 - s->d2066;
  double _56 = sqrt(_54 * _54 + _55 * _55);
  double _57 = _1 / (_56 * _56 * _56);
  double _58 = s->d2050 - s->d2065;
  double _59 = s->d2051 - s->d2066;
  double _60 = sqrt(_58 * _58 + _59 * _59);
  double _61 = _6 / (_60 * _60 * _60);
  double _62 = _54 * _57 + _58 * _61;
  double _63 = s->d2065 + s->d2068 + _62 * 0.5;
  double _64 = _11 - _63;
  double _65 = _55 * _57 + _59 * _61;
  double _66 = s->d2066 + s->d2069 + _65 * 0.5;
  double _67 = _14 - _66;
  double _68 = s->d2118 == 0 ? sqrt(_64 * _64 + _67 * _67) - 1000 < 0 ? _38 : s->d2118 : s->d2118;
  double _69 = s->d2040 - s->d2070;
  double _70 = s->d2041 - s->d2071;
  double _71 = sqrt(_69 * _69 + _70 * _70);
  double _72 = _1 / (_71 * _71 * _71);
  double _73 = s->d2050 - s->d2070;
  double _74 = s->d2051 - s->d2071;
  double _75 = sqrt(_73 * _73 + _74 * _74);
  double _76 = _6 / (_75 * _75 * _75);
  double _77 = _69 * _72 + _73 * _76;
  double _78 = s->d2070 + s->d2073 + _77 * 0.5;
  double _79 = _11 - _78;
  double _80 = _70 * _72 + _74 * _76;
  double _81 = s->d2071 + s->d2074 + _80 * 0.5;
  double _82 = _14 - _81;
  double _83 = s->d2119 == 0 ? sqrt(_79 * _79 + _82 * _82) - 1000 < 0 ? _38 : s->d2119 : s->d2119;
  double _84 = s->d2040 - s->d2075;
  double _85 = s->d2041 - s->d2076;
  double _86 = sqrt(_84 * _84 + _85 * _85);
  double _87 = _1 / (_86 * _86 * _86);
  double _88 = s->d2050 - s->d2075;
  double _89 = s->d2051 - s->d2076;
  double _90 = sqrt(_88 * _88 + _89 * _89);
  double _91 = _6 / (_90 * _90 * _90);
  double _92 = _84 * _87 + _88 * _91;
  double _93 = s->d2075 + s->d2078 + _92 * 0.5;
  double _94 = _11 - _93;
  double _95 = _85 * _87 + _89 * _91;
  double _96 = s->d2076 + s->d2079 + _95 * 0.5;
  double _97 = _14 - _96;
  double _98 = s->d2120 == 0 ? sqrt(_94 * _94 + _97 * _97) - 1000 < 0 ? _38 : s->d2120 : s->d2120;
  double _99 = s->d2040 - s->d2080;
  double _100 = s->d2041 - s->d2081;
  double _101 = sqrt(_99 * _99 + _100 * _100);
  double _102 = _1 / (_101 * _101 * _101);
  double _103 = s->d2050 - s->d2080;
  double _104 = s->d2051 - s->d2081;
  double _105 = sqrt(_103 * _103 + _104 * _104);
  double _106 = _6 / (_105 * _105 * _105);
  double _107 = _99 * _102 + _103 * _106;
  double _108 = s->d2080 + s->d2083 + _107 * 0.5;
  double _109 = _11 - _108;
  double _110 = _100 * _102 + _104 * _106;
  double _111 = s->d2081 + s->d2084 + _110 * 0.5;
  double _112 = _14 - _111;
  double _113 = s->d2121 == 0 ? sqrt(_109 * _109 + _112 * _112) - 1000 < 0 ? _38 : s->d2121 : s->d2121;
  double _114 = s->d2040 - s->d2085;
  double _115 = s->d2041 - s->d2086;
  double _116 = sqrt(_114 * _114 + _115 * _115);
  double _117 = _1 / (_116 * _116 * _116);
  double _118 = s->d2050 - s->d2085;
  double _119 = s->d2051 - s->d2086;
  double _120 = sqrt(_118 * _118 + _119 * _119);
  double _121 = _6 / (_120 * _120 * _120);
  double _122 = _114 * _117 + _118 * _121;
  double _123 = s->d2085 + s->d2088 + _122 * 0.5;
  double _124 = _11 - _123;
  double _125 = _115 * _117 + _119 * _121;
  double _126 = s->d2086 + s->d2089 + _125 * 0.5;
  double _127 = _14 - _126;
  double _128 = s->d2122 == 0 ? sqrt(_124 * _124 + _127 * _127) - 1000 < 0 ? _38 : s->d2122 : s->d2122;
  double _129 = s->d2040 - s->d2090;
  double _130 = s->d2041 - s->d2091;
  double _131 = sqrt(_129 * _129 + _130 * _130);
  double _132 = _1 / (_131 * _131 * _131);
  double _133 = s->d2050 - s->d2090;
  double _134 = s->d2051 - s->d2091;
  double _135 = sqrt(_133 * _133 + _134 * _134);
  double _136 = _6 / (_135 * _135 * _135);
  double _137 = _129 * _132 + _133 * _136;
  double _138 = s->d2090 + s->d2093 + _137 * 0.5;
  double _139 = _11 - _138;
  double _140 = _130 * _132 + _134 * _136;
  double _141 = s->d2091 + s->d2094 + _140 * 0.5;
  double _142 = _14 - _141;
  double _143 = s->d2123 == 0 ? sqrt(_139 * _139 + _142 * _142) - 1000 < 0 ? _38 : s->d2123 : s->d2123;
  double _144 = s->d2040 - s->d2095;
  double _145 = s->d2041 - s->d2096;
  double _146 = sqrt(_144 * _144 + _145 * _145);
  double _147 = _1 / (_146 * _146 * _146);
  double _148 = s->d2050 - s->d2095;
  double _149 = s->d2051 - s->d2096;
  double _150 = sqrt(_148 * _148 + _149 * _149);
  double _151 = _6 / (_150 * _150 * _150);
  double _152 = _144 * _147 + _148 * _151;
  double _153 = s->d2095 + s->d2098 + _152 * 0.5;
  double _154 = _11 - _153;
  double _155 = _145 * _147 + _149 * _151;
  double _156 = s->d2096 + s->d2099 + _155 * 0.5;
  double _157 = _14 - _156;
  double _158 = s->d2124 == 0 ? sqrt(_154 * _154 + _157 * _157) - 1000 < 0 ? _38 : s->d2124 : s->d2124;
  double _159 = s->d2040 - s->d2100;
  double _160 = s->d2041 - s->d2101;
  double _161 = sqrt(_159 * _159 + _160 * _160);
  double _162 = _1 / (_161 * _161 * _161);
  double _163 = s->d2050 - s->d2100;
  double _164 = s->d2051 - s->d2101;
  double _165 = sqrt(_163 * _163 + _164 * _164);
  double _166 = _6 / (_165 * _165 * _165);
  double _167 = _159 * _162 + _163 * _166;
  double _168 = s->d2100 + s->d2103 + _167 * 0.5;
  double _169 = _11 - _168;
  double _170 = _160 * _162 + _164 * _166;
  double _171 = s->d2101 + s->d2104 + _170 * 0.5;
  double _172 = _14 - _171;
  double _173 = s->d2125 == 0 ? sqrt(_169 * _169 + _172 * _172) - 1000 < 0 ? _38 : s->d2125 : s->d2125;
  double _174 = s->d2040 - s->d2105;
  double _175 = s->d2041 - s->d2106;
  double _176 = sqrt(_174 * _174 + _175 * _175);
  double _177 = _1 / (_176 * _176 * _176);
  double _178 = s->d2050 - s->d2105;
  double _179 = s->d2051 - s->d2106;
  double _180 = sqrt(_178 * _178 + _179 * _179);
  double _181 = _6 / (_180 * _180 * _180);
  double _182 = _174 * _177 + _178 * _181;
  double _183 = s->d2105 + s->d2108 + _182 * 0.5;
  double _184 = _11 - _183;
  double _185 = _175 * _177 + _179 * _181;
  double _186 = s->d2106 + s->d2109 + _185 * 0.5;
  double _187 = _14 - _186;
  double _188 = s->d2126 == 0 ? sqrt(_184 * _184 + _187 * _187) - 1000 < 0 ? _38 : s->d2126 : s->d2126;
  double _189 = s->d2040 - s->d2110;
  double _190 = s->d2041 - s->d2111;
  double _191 = sqrt(_189 * _189 + _190 * _190);
  double _192 = _1 / (_191 * _191 * _191);
  double _193 = s->d2050 - s->d2110;
  double _194 = s->d2051 - s->d2111;
  double _195 = sqrt(_193 * _193 + _194 * _194);
  double _196 = _6 / (_195 * _195 * _195);
  double _197 = _189 * _192 + _193 * _196;
  double _198 = s->d2110 + s->d2113 + _197 * 0.5;
  double _199 = _11 - _198;
  double _200 = _190 * _192 + _194 * _196;
  double _201 = s->d2111 + s->d2114 + _200 * 0.5;
  double _202 = _14 - _201;
  double _203 = s->d2127 == 0 ? sqrt(_199 * _199 + _202 * _202) - 1000 < 0 ? _38 : s->d2127 : s->d2127;
  output[0] = sqrt(_12 * _12 + _15 * _15) - 6.357e+06 < 0 ? -1 : sqrt(_16 * _16 + _17 * _17) - 1.738e+06 < 0 ? -1 : 10000 - _18 < 0 ? -1 : _37 < 0 ? -1 : _38 == 0 ? (25 * (s->d2128 - _36 + _37) / 85000 + 75 * ((s->d2116 == 0 ? _34 < 0 ? _38 : s->d2116 : s->d2116) + _53 + _68 + _83 + _98 + _113 + _128 + _143 + _158 + _173 + _188 + _203) / 2.4e+07) * 8 : 0;
  output[1] = _37;
  double _204 = s->d2040 - _11;
  output[2] = _204;
  double _205 = s->d2041 - _14;
  output[3] = _205;
  output[4] = _29 - _11;
  output[5] = _32 - _14;
  output[6] = s->d2128 - _36;
  output[7] = _48 - _11;
  output[8] = _51 - _14;
  output[9] = _53 == 0 ? 0 : 1;
  output[10] = _63 - _11;
  output[11] = _66 - _14;
  output[12] = _68 == 0 ? 0 : 1;
  output[13] = _78 - _11;
  output[14] = _81 - _14;
  output[15] = _83 == 0 ? 0 : 1;
  output[16] = _93 - _11;
  output[17] = _96 - _14;
  output[18] = _98 == 0 ? 0 : 1;
  output[19] = _108 - _11;
  output[20] = _111 - _14;
  output[21] = _113 == 0 ? 0 : 1;
  output[22] = _123 - _11;
  output[23] = _126 - _14;
  output[24] = _128 == 0 ? 0 : 1;
  output[25] = _138 - _11;
  output[26] = _141 - _14;
  output[27] = _143 == 0 ? 0 : 1;
  output[28] = _153 - _11;
  output[29] = _156 - _14;
  output[30] = _158 == 0 ? 0 : 1;
  output[31] = _168 - _11;
  output[32] = _171 - _14;
  output[33] = _173 == 0 ? 0 : 1;
  output[34] = _183 - _11;
  output[35] = _186 - _14;
  output[36] = _188 == 0 ? 0 : 1;
  output[37] = _198 - _11;
  output[38] = _201 - _14;
  output[39] = _203 == 0 ? 0 : 1;
  double _206 = s->d2040 - s->d2050;
  double _207 = s->d2041 - s->d2051;
  double _208 = sqrt(_206 * _206 + _207 * _207);
  double _209 = _1 / (_208 * _208 * _208);
  double _210 = _206 * _209;
  double _211 = s->d2050 + s->d2053 + _210 * 0.5;
  output[100] = _211 - _11;
  double _212 = _207 * _209;
  double _213 = s->d2051 + s->d2054 + _212 * 0.5;
  output[101] = _213 - _14;
  s->d2039 = s->d2039 + 1;
  s->d2040 = s->d2040;
  s->d2041 = s->d2041;
  s->d2042 = s->d2042;
  s->d2043 = s->d2043;
  s->d2044 = s->d2044;
  s->d2045 = _11;
  s->d2046 = _14;
  s->d2047 = s->d2047;
  double _214 = sqrt(_204 * _204 + _205 * _205);
  double _215 = _1 / (_214 * _214 * _214);
  double _216 = s->d2050 - _11;
  double _217 = s->d2051 - _14;
  double _218 = sqrt(_216 * _216 + _217 * _217);
  double _219 = _6 / (_218 * _218 * _218);
  s->d2048 = s->d2048 + input[2] + (_204 * _215 + _216 * _219 + _10) / 2;
  s->d2049 = s->d2049 + input[3] + (_205 * _215 + _217 * _219 + _13) / 2;
  s->d2050 = _211;
  s->d2051 = _213;
  s->d2052 = s->d2052;
  double _220 = s->d2040 - _211;
  double _221 = s->d2041 - _213;
  double _222 = sqrt(_220 * _220 + _221 * _221);
  double _223 = _1 / (_222 * _222 * _222);
  s->d2053 = s->d2053 + (_220 * _223 + _210) / 2;
  s->d2054 = s->d2054 + (_221 * _223 + _212) / 2;
  s->d2055 = _29;
  s->d2056 = _32;
  s->d2057 = s->d2057;
  double _224 = s->d2040 - _29;
  double _225 = s->d2041 - _32;
  double _226 = sqrt(_224 * _224 + _225 * _225);
  double _227 = _1 / (_226 * _226 * _226);
  double _228 = s->d2050 - _29;
  double _229 = s->d2051 - _32;
  double _230 = sqrt(_228 * _228 + _229 * _229);
  double _231 = _6 / (_230 * _230 * _230);
  s->d2058 = s->d2058 + (_224 * _227 + _228 * _231 + _28) / 2;
  s->d2059 = s->d2059 + (_225 * _227 + _229 * _231 + _31) / 2;
  s->d2060 = _48;
  s->d2061 = _51;
  s->d2062 = s->d2062;
  double _232 = s->d2040 - _48;
  double _233 = s->d2041 - _51;
  double _234 = sqrt(_232 * _232 + _233 * _233);
  double _235 = _1 / (_234 * _234 * _234);
  double _236 = s->d2050 - _48;
  double _237 = s->d2051 - _51;
  double _238 = sqrt(_236 * _236 + _237 * _237);
  double _239 = _6 / (_238 * _238 * _238);
  s->d2063 = s->d2063 + (_232 * _235 + _236 * _239 + _47) / 2;
  s->d2064 = s->d2064 + (_233 * _235 + _237 * _239 + _50) / 2;
  s->d2065 = _63;
  s->d2066 = _66;
  s->d2067 = s->d2067;
  double _240 = s->d2040 - _63;
  double _241 = s->d2041 - _66;
  double _242 = sqrt(_240 * _240 + _241 * _241);
  double _243 = _1 / (_242 * _242 * _242);
  double _244 = s->d2050 - _63;
  double _245 = s->d2051 - _66;
  double _246 = sqrt(_244 * _244 + _245 * _245);
  double _247 = _6 / (_246 * _246 * _246);
  s->d2068 = s->d2068 + (_240 * _243 + _244 * _247 + _62) / 2;
  s->d2069 = s->d2069 + (_241 * _243 + _245 * _247 + _65) / 2;
  s->d2070 = _78;
  s->d2071 = _81;
  s->d2072 = s->d2072;
  double _248 = s->d2040 - _78;
  double _249 = s->d2041 - _81;
  double _250 = sqrt(_248 * _248 + _249 * _249);
  double _251 = _1 / (_250 * _250 * _250);
  double _252 = s->d2050 - _78;
  double _253 = s->d2051 - _81;
  double _254 = sqrt(_252 * _252 + _253 * _253);
  double _255 = _6 / (_254 * _254 * _254);
  s->d2073 = s->d2073 + (_248 * _251 + _252 * _255 + _77) / 2;
  s->d2074 = s->d2074 + (_249 * _251 + _253 * _255 + _80) / 2;
  s->d2075 = _93;
  s->d2076 = _96;
  s->d2077 = s->d2077;
  double _256 = s->d2040 - _93;
  double _257 = s->d2041 - _96;
  double _258 = sqrt(_256 * _256 + _257 * _257);
  double _259 = _1 / (_258 * _258 * _258);
  double _260 = s->d2050 - _93;
  double _261 = s->d2051 - _96;
  double _262 = sqrt(_260 * _260 + _261 * _261);
  double _263 = _6 / (_262 * _262 * _262);
  s->d2078 = s->d2078 + (_256 * _259 + _260 * _263 + _92) / 2;
  s->d2079 = s->d2079 + (_257 * _259 + _261 * _263 + _95) / 2;
  s->d2080 = _108;
  s->d2081 = _111;
  s->d2082 = s->d2082;
  double _264 = s->d2040 - _108;
  double _265 = s->d2041 - _111;
  double _266 = sqrt(_264 * _264 + _265 * _265);
  double _267 = _1 / (_266 * _266 * _266);
  double _268 = s->d2050 - _108;
  double _269 = s->d2051 - _111;
  double _270 = sqrt(_268 * _268 + _269 * _269);
  double _271 = _6 / (_270 * _270 * _270);
  s->d2083 = s->d2083 + (_264 * _267 + _268 * _271 + _107) / 2;
  s->d2084 = s->d2084 + (_265 * _267 + _269 * _271 + _110) / 2;
  s->d2085 = _123;
  s->d2086 = _126;
  s->d2087 = s->d2087;
  double _272 = s->d2040 - _123;
  double _273 = s->d2041 - _126;
  double _274 = sqrt(_272 * _272 + _273 * _273);
  double _275 = _1 / (_274 * _274 * _274);
  double _276 = s->d2050 - _123;
  double _277 = s->d2051 - _126;
  double _278 = sqrt(_276 * _276 + _277 * _277);
  double _279 = _6 / (_278 * _278 * _278);
  s->d2088 = s->d2088 + (_272 * _275 + _276 * _279 + _122) / 2;
  s->d2089 = s->d2089 + (_273 * _275 + _277 * _279 + _125) / 2;
  s->d2090 = _138;
  s->d2091 = _141;
  s->d2092 = s->d2092;
  double _280 = s->d2040 - _138;
  double _281 = s->d2041 - _141;
  double _282 = sqrt(_280 * _280 + _281 * _281);
  double _283 = _1 / (_282 * _282 * _282);
  double _284 = s->d2050 - _138;
  double _285 = s->d2051 - _141;
  double _286 = sqrt(_284 * _284 + _285 * _285);
  double _287 = _6 / (_286 * _286 * _286);
  s->d2093 = s->d2093 + (_280 * _283 + _284 * _287 + _137) / 2;
  s->d2094 = s->d2094 + (_281 * _283 + _285 * _287 + _140) / 2;
  s->d2095 = _153;
  s->d2096 = _156;
  s->d2097 = s->d2097;
  double _288 = s->d2040 - _153;
  double _289 = s->d2041 - _156;
  double _290 = sqrt(_288 * _288 + _289 * _289);
  double _291 = _1 / (_290 * _290 * _290);
  double _292 = s->d2050 - _153;
  double _293 = s->d2051 - _156;
  double _294 = sqrt(_292 * _292 + _293 * _293);
  double _295 = _6 / (_294 * _294 * _294);
  s->d2098 = s->d2098 + (_288 * _291 + _292 * _295 + _152) / 2;
  s->d2099 = s->d2099 + (_289 * _291 + _293 * _295 + _155) / 2;
  s->d2100 = _168;
  s->d2101 = _171;
  s->d2102 = s->d2102;
  double _296 = s->d2040 - _168;
  double _297 = s->d2041 - _171;
  double _298 = sqrt(_296 * _296 + _297 * _297);
  double _299 = _1 / (_298 * _298 * _298);
  double _300 = s->d2050 - _168;
  double _301 = s->d2051 - _171;
  double _302 = sqrt(_300 * _300 + _301 * _301);
  double _303 = _6 / (_302 * _302 * _302);
  s->d2103 = s->d2103 + (_296 * _299 + _300 * _303 + _167) / 2;
  s->d2104 = s->d2104 + (_297 * _299 + _301 * _303 + _170) / 2;
  s->d2105 = _183;
  s->d2106 = _186;
  s->d2107 = s->d2107;
  double _304 = s->d2040 - _183;
  double _305 = s->d2041 - _186;
  double _306 = sqrt(_304 * _304 + _305 * _305);
  double _307 = _1 / (_306 * _306 * _306);
  double _308 = s->d2050 - _183;
  double _309 = s->d2051 - _186;
  double _310 = sqrt(_308 * _308 + _309 * _309);
  double _311 = _6 / (_310 * _310 * _310);
  s->d2108 = s->d2108 + (_304 * _307 + _308 * _311 + _182) / 2;
  s->d2109 = s->d2109 + (_305 * _307 + _309 * _311 + _185) / 2;
  s->d2110 = _198;
  s->d2111 = _201;
  s->d2112 = s->d2112;
  double _312 = s->d2040 - _198;
  double _313 = s->d2041 - _201;
  double _314 = sqrt(_312 * _312 + _313 * _313);
  double _315 = _1 / (_314 * _314 * _314);
  double _316 = s->d2050 - _198;
  double _317 = s->d2051 - _201;
  double _318 = sqrt(_316 * _316 + _317 * _317);
  double _319 = _6 / (_318 * _318 * _318);
  s->d2113 = s->d2113 + (_312 * _315 + _316 * _319 + _197) / 2;
  s->d2114 = s->d2114 + (_313 * _315 + _317 * _319 + _200) / 2;
  s->d2115 = _37;
  s->d2116 = s->d2116 == 0 ? _34 < 0 ? _38 : s->d2116 : s->d2116;
  s->d2117 = _53;
  s->d2118 = _68;
  s->d2119 = _83;
  s->d2120 = _98;
  s->d2121 = _113;
  s->d2122 = _128;
  s->d2123 = _143;
  s->d2124 = _158;
  s->d2125 = _173;
  s->d2126 = _188;
  s->d2127 = _203;
  s->d2128 = s->d2128 - _36;
  
}


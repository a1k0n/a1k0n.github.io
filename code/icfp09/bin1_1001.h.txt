struct vm_state {
  double d265, d248, d263, d264, d260, d262, d255,
         d250, d249, d254, d251, d258, d257, d256, d253,
         d252, d259, d261;
};

#include <math.h>

void vm_init(vm_state *s, double *output, double *input) {
  output[0] = 0;
  output[1] = 10000;
  output[2] = -6.557e+06;
  output[3] = 7814.93;
  output[4] = 4.2164e+07;
  s->d248 = 1;
  s->d249 = 0;
  s->d250 = 0;
  s->d251 = 6e+24;
  s->d252 = 0;
  s->d253 = 0;
  s->d254 = 6.557e+06;
  s->d255 = -7814.93;
  s->d256 = 1;
  s->d257 = -9.31419;
  s->d258 = -7814.93;
  s->d259 = 0;
  s->d260 = 0;
  s->d261 = 10000;
  s->d262 = 4.2164e+07;
  s->d263 = 1000;
  s->d264 = 2000;
  s->d265 = 29;
  
}

void vm_step(vm_state *s, double *output, double *input) {
  double _0 = s->d249 - s->d254;
  double _1 = 6.67428e-11 * s->d251;
  double _2 = s->d250 - s->d255;
  double _3 = sqrt(_0 * _0 + _2 * _2);
  double _4 = _1 / (_3 * _3 * _3);
  double _5 = _0 * _4;
  double _6 = s->d254 + s->d257 + (input[2] + _5) * 0.5;
  double _7 = _6 - s->d249;
  double _8 = _2 * _4;
  double _9 = s->d255 + s->d258 + (input[3] + _8) * 0.5;
  double _10 = _9 - s->d250;
  double _11 = sqrt(_7 * _7 + _10 * _10);
  double _12 = sqrt(input[2] * input[2] + input[3] * input[3]);
  double _13 = s->d261 - _12;
  double _14 = _11 - s->d262;
  double _15 = _14 < 0 ? 0 - _14 : _14;
  double _16 = _15 - 1000;
  output[0] = _11 - 6.357e+06 < 0 ? -1 : 10000 - _12 < 0 ? -1 : _13 < 0 ? -1 : 900 - (_16 < 0 ? _12 == 0 ? s->d259 + 1 : 0 : 0) < 0 ? s->d265 + (10000 - _13) / 10000 * 45 + 25 : 0;
  output[1] = _13;
  double _17 = s->d249 - _6;
  output[2] = _17;
  double _18 = s->d250 - _9;
  output[3] = _18;
  output[4] = s->d262;
  s->d248 = s->d248 + 1;
  s->d249 = s->d249;
  s->d250 = s->d250;
  s->d251 = s->d251;
  s->d252 = s->d252;
  s->d253 = s->d253;
  s->d254 = _6;
  s->d255 = _9;
  s->d256 = s->d256;
  double _19 = sqrt(_17 * _17 + _18 * _18);
  double _20 = _1 / (_19 * _19 * _19);
  s->d257 = s->d257 + input[2] + (_17 * _20 + _5) / 2;
  s->d258 = s->d258 + input[3] + (_18 * _20 + _8) / 2;
  s->d259 = _16 < 0 ? _12 == 0 ? s->d259 + 1 : 0 : 0;
  s->d260 = _16 < 0 ? _12 == 0 ? s->d260 + _15 : 0 : 0;
  s->d261 = _13;
  s->d262 = s->d262;
  double _21 = s->d263 - 1;
  s->d263 = _21 == 0 ? s->d264 : _21;
  s->d264 = _21 == 0 ? s->d264 * 2 : s->d264;
  s->d265 = _21 == 0 ? s->d265 - 1 : s->d265;
  
}

